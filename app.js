let express = require("express");
const dotenv = require("dotenv");
const cors = require("cors");
const bodyParser = require("body-parser");
const Razorpay = require("razorpay")
const crypto = require("crypto");
const path = require('path') 
dotenv.config();
let app = express();
const instance = new Razorpay ({//this instance used in instantiating order for razorpay 
    key_id:process.env.KEY_ID,
    key_secret:process.env.KEY_SECRET
})
//Middlewares
app.use(cors());
app.use(express.json());
app.use(
  bodyParser.urlencoded({
    extended: false,    
  })
);
app.use(bodyParser.json());
app.set('views', path.join(__dirname, 'views'))
app.set("view engine", "ejs");//setting view engine to ejs, so that we dont need to everytime specify the extension whenver we r refring to a template using the GET route

//Routes
app.get("/", (req, res) => {
  res.render("wrapper");  //
});
app.get("/Razorpayments", (req, res) => {
    res.render("payment", { key: process.env.KEY_ID });//we render here payment.ejs file , we dont need to specify the extension , and passing key from backend to the front end so that we dont have to actually write the key in the code 
  });
  app.post("/api/payment/order", (req, res) => {//to create the order , instantiate the order and recive the order id from razorpay server 
    params = req.body;//captuing the things we passed from front end , amount currency reciept etc
    instance.orders//creates an order on razorpay server
      .create(params)//promise 
      .then((data) => {
        res.send({ sub: data, status: "success" });//sends data(order id) and a status      
      })
      .catch((error) => {
        res.send({ sub: error, status: "failed" });
      });
  });
  
  app.post("/api/payment/verify", (req, res) => {//will verify the signature and will send a response weather if sigs were succesfuly verified or not 
    body = req.body.razorpay_order_id + "|" + req.body.razorpay_payment_id;
  
    var expectedSignature = crypto
      .createHmac("sha256", process.env.KEY_SECRET)//signature generated by KEY_SECRET
      .update(body.toString())
      .digest("hex");
    console.log("sig" + req.body.razorpay_signature);//signature passed from front end 
    console.log("sig" + expectedSignature);
    var response = { status: "failure" };
    if (expectedSignature === req.body.razorpay_signature)
      response = { status: "success" };
    res.send(response);
  });
 
  //STRIPE
  

  const stripe = require('stripe')('sk_test_51Ig7NWSFN78cA4x1dAhsPy9lI5UGAktcI1e6BxCitpbixg0CBSzV0GaCdbnkLoeFdFsEqVSomjWnEILDF1NGeDHv00KPZ4bpgy');
 
  //app.use(express.static('.')); //serving static file , app.use(express.static('folder')) 

  app.get('/Stripe', function(req, res){ 
    res.render('checkout') 
})
  
  const YOUR_DOMAIN = 'http://localhost:3000';
  
  app.post('/create-checkout-session', async (req, res) => {
    const session = await stripe.checkout.sessions.create({
      payment_method_types: ['card'],
      line_items: [
        {
          price_data: {
            currency: 'usd',
            product_data: {
              name: 'Awesome Product',
              images: ['https://images.fineartamerica.com/images/artworkimages/mediumlarge/2/rainbow-rose-michelle-wittensoldner.jpg'],
            },
            unit_amount: 2000,
          },
          quantity: 1,
        },
      ],
      mode: 'payment',
      success_url: `${YOUR_DOMAIN}/stripe/success`,
      cancel_url: `${YOUR_DOMAIN}/stripe/cancel`,
    });
  
    res.json({ id: session.id });
  });
  
  ///PAYPAL
  app.get('/paypal', (req, res) => res.render('paypal'));

  const paypal = require('paypal-rest-sdk');

  paypal.configure({
    'mode': 'sandbox', //sandbox or live
    'client_id': 'Adxzsj7gA3qqtUqWO493AbfVTnkTQeBWWvTxgnKBxTksPFdU1RWf1UjaDkB_o66d5kg0wdMRzY6K7zJ1',
    'client_secret': 'EDvZKSak9gRm-uRohkHsN_SrzmGXXwgChjjltKk-NN2Ba4za9hj7fqf5hE7TTk3weYW5tRHBJpKRLuo2'
  });
  
  app.post('/pay', (req, res) => {
    const create_payment_json = {
      "intent": "sale",
      "payer": {
          "payment_method": "paypal"
      },
      "redirect_urls": {
          "return_url": `${YOUR_DOMAIN}/paypal/success`,
          "cancel_url": `${YOUR_DOMAIN}/paypal/cancel`
      },
      "transactions": [{
          "item_list": {
              "items": [{
                  "name": "Red Sox Hat",
                  "sku": "001",
                  "price": "25.00",
                  "currency": "USD",
                  "quantity": 1
              }]
          },
          "amount": {
              "currency": "USD",
              "total": "25.00"
          },
          "description": "Hat for the best team ever"
      }]
  };
  
  paypal.payment.create(create_payment_json, function (error, payment) {
    if (error) {
        throw error;
    } else {
        for(let i = 0;i < payment.links.length;i++){
          if(payment.links[i].rel === 'approval_url'){
            //res.redirect(payment.links[i].href);
            console.log("hii")
            console.log(payment.links[i].href)
            res.json({forwardLink: payment.links[i].href});
          }
        }
    }
  });
  
  });
  
  app.get('/paypal/success', (req, res) => {
    const payerId = req.query.PayerID;
    const paymentId = req.query.paymentId;
  
    const execute_payment_json = {
      "payer_id": payerId,
      "transactions": [{
          "amount": {
              "currency": "USD",
              "total": "25.00"
          }
      }]
    };
  
    paypal.payment.execute(paymentId, execute_payment_json, function (error, payment) {
      if (error) {
          console.log(error.response);
          throw error;
      } else {
          console.log(JSON.stringify(payment));
          res.send('Success');
      }
  });
  });
  
  app.get('/paypal/cancel', (req, res) => res.send('Cancelled'));

 

//PAY U - not yet

app.get('/stripe/cancel', function(req, res){ 
    res.render('cancel') 
})
app.get('/stripe/success', function(req, res){ 
  res.render('success') 
})

app.listen("3000", () => {
  console.log("server started");
});


